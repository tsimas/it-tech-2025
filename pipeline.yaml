variables:
  - group: ENV_GROUP  # Tartalma: APP_ENV: "prod", LIMIT: 5
  - name: dynamicVal
    value: $[format('{0}_{1}', variables['APP_ENV'], 100)]  # prod_100
  - name: pInput
    value: $[ div(64, 8) ]  # 8

stages:
- stage: Alpha
  variables:
    dynamicVal: "ALPHA_OVERRIDE"           # Stage override (macro)
  jobs:
  - job: Decide
    steps:
    - bash: |
        if [[ "${{ variables.pInput }}" -gt $(LIMIT) ]]; then
          echo "##vso[task.setvariable variable=decision;isOutput=true]HIGH"
        else
          echo "##vso[task.setvariable variable=decision;isOutput=true]LOW"
        fi
      name: SetDecision
    - script: echo "1) Alpha dynamicVal: $(dynamicVal)"

- stage: Beta
  dependsOn: Alpha
  variables:
    dynamicVal: "BETA_$[ dependencies.Alpha.outputs['Decide.SetDecision.decision'] ]"  # runtime
  jobs:
  - job: Process
    variables:
      LIMIT: 7   # job-level override
    steps:
    - script: echo "2) Beta dynamicVal: $(dynamicVal)"
    - script: echo "3) LIMIT: $(LIMIT)"
    - script: echo "4) APP_ENV: ${{ variables.APP_ENV }}"

- stage: Gamma
  dependsOn: Beta
  jobs:
  - job: TemplatedJob
    steps:
    - script: echo "5) Template base: $(dynamicVal)_GAMMA"
    - script: echo "6) APP_ENV: ${{ variables.APP_ENV }}"
    - script: |
        if [[ "${{ variables.APP_ENV }}" == "prod" ]]; then
          echo "7) Nested if: PROD"
        else
          echo "7) Nested if: OTHER"
        fi
    - script: echo "8) Concat: $(dynamicVal)_$(APP_ENV)"

- stage: Delta
  dependsOn: Gamma
  jobs:
  - deployment: Final
    environment: test
    variables:
      dynamicVal: "DELTA_${{ variables.APP_ENV }}"
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "9) Final Val: $(dynamicVal)"
